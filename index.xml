<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>compulsory thinking</title>
    <link>https://opssec.in/</link>
    <description>Recent content on compulsory thinking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://opssec.in/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Continuous Deployment and DEIS</title>
      <link>https://opssec.in/2016/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://opssec.in/2016/</guid>
      <description>** Introduction
Continuous Deployment and Continuous Integration are topics that you can evolve and improve forever. The best reading on it IMO is [1] by Jez Humble, and it will be the guide for this post.
&amp;ldquo;The time from deciding that you need to make a change to having it in production is known as the cycle time, and it is a vital metric for any project.&amp;rdquo;
What we want here is do reduce the cycle time of the project in a reliable, secure and low-risk way, an automated process that is trusted enough to not be rolledback.</description>
    </item>
    
    <item>
      <title>Consul - Service Discovery</title>
      <link>https://opssec.in/2015/0309/consul/</link>
      <pubDate>Thu, 03 Sep 2015 18:00:00 +0000</pubDate>
      
      <guid>https://opssec.in/2015/0309/consul/</guid>
      <description>Introduction Consul is a Service Discovery system, on a microservice architecture for example, we have some external and internal services laying around. There is a complexity in the setup and orchestration of these services which are being setup and destroyed all the time.
A long term solution to the problem is to use DNS, an address name resolver. It is a mature and larger used protocol, but we can find some issues nowadays: How can it know if the service is down or up?</description>
    </item>
    
    <item>
      <title>General finance formulas</title>
      <link>https://opssec.in/2015/0908/finance/</link>
      <pubDate>Sun, 09 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://opssec.in/2015/0908/finance/</guid>
      <description>Future value import numpy as np import warnings warnings.filterwarnings(&amp;#34;ignore&amp;#34;)
Fv represents the future value of an operation in a particular time. $$Fv = Pv * (1 + i)^n$$
def fv(pv, n, i): print(&amp;#39;{0:.2f}&amp;#39;.format(np.fv(i/100, n, 0, -pv))) fv(5000, 9, 4.5) 7430.48 fv(5000, 12, 1.5) 5978.09 fv(1000, 18, 1.25) 1250.58 fv(2800, 3, 3.5) 3104.41 fv(2000, 3, 3.5) 2217.44 fv(1000, 3, 3.5) 1108.72 fv(340, 2, 5) 374.85 fv(1000, 48, 2.2) 2842.12 fv(3000, 3*12, 0.</description>
    </item>
    
    <item>
      <title>Tsung Capacity Test</title>
      <link>https://opssec.in/2015/2607/</link>
      <pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://opssec.in/2015/2607/</guid>
      <description>Introduction In this post we are going to analyze a very interesting Erlang distributed load testing tool, called Tsung [1]. The cool things about this tool is the complete HTML report of each connection made.
NOTE If you are interested on real traffic replication, consider this project [2].
Configuration On tsung.xml we start the test plan, you can include here the list of clients, servers, the number/load time, as other sessions definitions.</description>
    </item>
    
  </channel>
</rss>
