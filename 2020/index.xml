<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2020 on compulsory thinking</title>
    <link>https://opssec.in/2020/</link>
    <description>Recent content in 2020 on compulsory thinking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://opssec.in/2020/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Network Policy E2E test suite</title>
      <link>https://opssec.in/2020/1227/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://opssec.in/2020/1227/</guid>
      <description>Network policy This post documents a few steps to test the E2E framework using the Kind cluster with different CNIs, giving the developer some good tooling for debugging and quick test replication.
Use this script to bring a Kind cluster with a specific CNI setup.
Finding the config parameters In the ~/.kube/config you can find the Cluster sections host, use the IP and Port to start the tests.
apiVersion: v1clusters:- cluster:certificate-authority-data: .</description>
    </item>
    
    <item>
      <title>Kubelet Dynamic Configuration</title>
      <link>https://opssec.in/2020/2405/</link>
      <pubDate>Sun, 24 May 2020 16:00:00 +0000</pubDate>
      
      <guid>https://opssec.in/2020/2405/</guid>
      <description>Introduction On Kubernetes 1.10+ a new way to configure Kubelet via YAML became v1beta1, the struct KubeletConfiguration become available via the â€“config flag. So most of the regular ones can be configured via this file. This approach is extensively used by kubeadm for setting up the installation as was noted in last post.
The idea of this post now is to do a code walkthrough and take a look in some KEPs and designs for the subsystem that reload this configuration at flight giving Kubelet a Dynamic Configuration capacity, this feature became beta on 1.</description>
    </item>
    
    <item>
      <title>Kubelet Debugging Session</title>
      <link>https://opssec.in/2020/1005/</link>
      <pubDate>Sun, 10 May 2020 16:00:00 +0000</pubDate>
      
      <guid>https://opssec.in/2020/1005/</guid>
      <description>Introduction This post reflects some work on setting up a development environment for Kubernetes. We must have Goland, Virtualbox, Delve and MacOS installed. If you&amp;#39;re using Linux probably the vm part is not necessary.
Installing the tools VirtualBox Since we are on MacOSX, and Kubelet nodes works only on Linux and Windows the setup of a vm is necessary for this step a Debian Buster image is going to be used, the Virtualbox is 6.</description>
    </item>
    
  </channel>
</rss>
